#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <math.h>

int binary_search(int arr[], int k,int sz)
{
	//  int sz = sizeof(arr) / sizeof(arr[0]);此时传递来的是数组arr首元素的地址
	int left = 0;
	int right = sz - 1;
	
	while (left < right + 1)
	{
		int mid = (left + right) / 2;  // 中间元素的下标，且不必须放循环内部，因为每次都要用中间数，否则只使用一次
		if (arr[mid] < k)
		{
			left = mid + 1;
		}
		else if (arr[mid] > k)
		{
			right = mid - 1;
		}
		else
		{
			return mid;
		}
	}
	return -1;
}

int main()
{   //  二分查找，找到返回该数下标，未找到返回-1
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 0;
	scanf("%d", &k);
	int sz = sizeof(arr) / sizeof(arr[0]);// 所以我们直接求好其个数并传送过去
	int ret = binary_search(arr, k,sz);
	if (ret != -1)
	{
		printf("Find it : %d", ret);
	}
	else
	{
		printf("Nothing.");
	}
	return 0;
}

//int is_leap_yeah(int x,int y)  //  is_leap_yeah — 代表闰年的函数 
//{
//		if ((x % 4 == 0 && x % 100 != 0) or (x % 400 == 0))
//			return 1;
//			return 0;
//}
//
//int main()
//{
//	int year = 0;
//	int year_1 = 0;
//	scanf("%d%d", &year, &year_1);
//	for (year; year < year_1 + 1; year++)
//	{
//		if (is_leap_yeah(year,year_1) == 1)
//			printf("%d ", year);
//	}
//	return 0;
//}

//int panduan(int x)
//{
//	int n = 0;
//	int y = 0;
//	for (n = 2; n <=sqrt(x); n++) //  sqrt() 开平方
//	{
//		if (x % n == 0)
//			return 0;  //如果里面写else return 0，则只除一次就返回1
//	}return 1;
//}
//
//int main()
//{
//	int i,j;
//	//int j = 0;
//	scanf("%d%d", &i,&j);
//	for (i = 2; i < j + 1; i++)
//	{
//		if (panduan(i) == 1)
//			printf("%d ", i);
//	}
//	return 0;
//}

//   设计函数交换整型变量的内容
//  void  表示无返回值，空，此处函数无return
//void swap1(int x,int y)//  传值调用-函数的形参与实参分别占有不同的内存块，对形参的修改不会改变实参
//{
//	int tmp = 0;
//	tmp = x;
//	x = y;
//	y = tmp;
//	
//}
//void swap2(int* pa, int* pb)  //传址调用-函数内部可以直接操作修改函数外部的变量
//{
//	int tmp = 0;
//	tmp = *pa;
//	*pa = *pb;
//	*pb = tmp;
//}
//
//int main()
//{
//	int a, b;
//	int c = 0;
//	scanf("%d%d", &a, &b);
//	printf("a= %d b= %d\n", a, b);
//	/*c = a;
//	a = b;
//	b = c;*/        //  *pa  解引用操作
//	swap1(&a, &b);  //  int* pa = &a, pa 指针变量存储地址.
//	printf("a= %d b= %d", a, b);
//	return 0;
//}

//int Max(int x, int y)
//{
//	if (x > y)
//		return x*x;
//	else
//		return y;
//}
//
//int main()
//{
//	int a,b;
//	//int b = 0;
//	scanf("%d%d", &a, &b);
//	int max = Max(a, b);
//	printf("%d", max);
//	return 0;
//}

//int main()
//{
//	char arr[] = "miss you so much!";
//	memset(arr, '*', );
//	printf("%s", arr);
//	return 0;
//}

//int main()
//{
//	char arr1[] = "down down baby";
//	char arr2[] = "宝贝爱你";
//	char arr3[22] = "666";
//	strcpy(arr3, arr2);//   后面是源头source，前面是目的地destination
//	printf("%s\n", arr3);
//
//	return 0;
//}

//int Add(int a, int b)
//{
//	int c = 0;
//	c = a + b;
//	return c;
//}
//int main()
//{
//	int a, b;
//	scanf("%d%d", &a, &b);
//	int sum = Add(a, b);
//	printf("%d", sum);
//	return 0;
//}
